[{"authors":["admin"],"categories":null,"content":"気が向いたときだけ、しがない高専生が独り言を書くブログです。 毎日更新するほど意識は高くないし、好きなこと、勉強したことをつらつらと。 Hugo + Academicテーマ を使って作成してます。\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"ja","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://hiratchi.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"気が向いたときだけ、しがない高専生が独り言を書くブログです。 毎日更新するほど意識は高くないし、好きなこと、勉強したことをつらつらと。 Hugo + Ac","tags":null,"title":"Hiratchi","type":"authors"},{"authors":[],"categories":["tech"],"content":"こんにちは, hiratchi です. この記事では, どのようにしてこのサイトを作ったかを解説します. 言わずもかな GitHub と Hugo という静的サイトジェネレータを用いて約20分で出来上がります. 記事はMarkdown で書けるので, 普段 Latex とか使うタイプの人ならば親和性が高いと思います.\nサイトを作るまでにやったこと Git, Hugo のインストール GitHub に2つのリポジトリ(コード管理用、公開用)を作成・クローン サイトの作成・テーマの適用 自分なりにサイトをカスタマイズ deploy.sh の作成\u0026amp;実行  以下, 順に解説していきます.\n0. Git, Hugo のインストール Git は言わずともしれたコード管理ツールの一つです(知らない人はコチラ). アカウントないよって人はココで登録しましょう. Git についてはコチラを参照して, 入れてみてください.\nHugo はGO言語(自分もよく知らない)で書かれた静的サイトジェネレータです. Markdown で記事がかけたり, 特に知識がなくてもテーマが豊富なので, すぐにいい感じのサイトが作れます. Hugo についても同様にコチラ(Linux, Mac, Windows)を参照して, 入れてみてください.\n1. GitHub に2つのリポジトリを作成・クローン この記事に倣って, コードの管理用のリポジトリと, デプロイ(公開)用のレポジトリを作ります. 自分のGitHub にアクセスして, 管理用の blog_src(名前は任意)と, デプロイ用の \u0026lt;ユーザ名\u0026gt;.github.io(指定)というレポジトリを作成してください. あとでクローンするのでREADMEの作成オプションは有効化しといてね. んで, ローカルに blog_src の方をクローンしましょう.\n$git clone https://github.com/\u0026lt;ユーザ名\u0026gt;/blog_src.git  基本的にはこっちをカスタマイズしていきます, もう片方は自分でいじることはほとんどありません.\n2. サイトの作成・テーマの適用 いよいよサイトを作ります, といっても難しいことは何一つとしてしません. blog_src フォルダのある階層で\n$hugo new site blog_src --force  とやります. hugo new site [サイトの名前] で hugo は新しいサイトを作ってくれます. 今回は空でない blog_src フォルダに作っちゃうので--force としていますが, あんまりよろしくはないです. こうして, めでたくサイトの作成は完了です.\n次にテーマを適用します. ココを見ればわかるように, めっちゃテーマが公開されてます. 好きなのを選んで, 作りましょう. このブログは academia というテーマを使っていますが, 今回は Cupper を使ってみます. どのテーマを使っても良いです, 基本的には下の画像のようにテーマのページの Installation ってとこに従えばだいたいできます. blog_src に入って以下を実行します.\n$git submodule add https://github.com/zwbetz-gh/cupper-hugo-theme.git themes/cupper-hugo-theme  これで, テーマを適用しました. hugo server コマンドでローカルのサーバを立ち上げることができます.\n$ hugo server -t cupper-hugo-theme : : : Web Server is available at http://localhost:39181/ (bind address 127.0.0.1)  一番最後に出てきたアドレスをブラウザのアドレスバーにコピペして, どんなページができているか確認してみましょう. (-t オプションはテーマを指定してサーバを立ち上げます.) こんな感じになったらとりあえず成功です. Ctrl+C でサーバーを閉じてあげましょう.\n3. 自分なりにサイトをカスタマイズ ここまできたらあとはあなたの好きにしましょう. 基本的にはconfig.toml ファイルをいじってサイトの構成を変えていきます. 今回はブログを作るのに最低限必要だと思うものを以下においておきます.\nconfig.toml\n# サイトの基本設定 title = \u0026quot;サイト名\u0026quot; baseurl = \u0026quot;https://hiratchi.github.io/\u0026quot; copyright = \u0026quot;(c) {year} Tomoya HIRAKAWA\u0026quot; # 言語設定 defaultContentLanguage = \u0026quot;ja\u0026quot; # 出力後の \u0026lt;html lang=\u0026quot;\u0026quot;\u0026gt; の部分 hasCJKLanguage = true # trueにすると、日中韓の言語で文字カウントとかが正しく動作する hrefTargetBlank = true theme = \u0026quot;cupper-hugo-theme\u0026quot; paginate = 10 # Number of items per page in paginated lists. enableEmoji = true enableGitInfo = true #記事の更新日 [menu] # メニューバーの設定 [[menu.nav]] name = \u0026quot;Home\u0026quot; # 表示される名称 url = \u0026quot;/\u0026quot; # 参照するアドレス weight = 1 [[menu.nav]] name = \u0026quot;Blog\u0026quot; # 表示される名称 url = \u0026quot;/post/\u0026quot; # 参照するアドレス weight = 2 [[menu.nav]] name = \u0026quot;About\u0026quot; # 表示される名称 url = \u0026quot;/about/\u0026quot; # 参照するアドレス weight = 3 [[menu.nav]] name = \u0026quot;Categories\u0026quot; # 表示される名称 url = \u0026quot;/categories/\u0026quot; # 参照するアドレス weight = 4 [taxonomies] tag = \u0026quot;tags\u0026quot; category = \u0026quot;categories\u0026quot;  また, themes/exampleSite/content にある themes/exampleSite/content/_index.md と, themes/exampleSite/content/about.md をルートフォルダの/content にコピーしておきます. ここで, $hugo server してあげると\u0026hellip; こんな感じになっていると思います. なんか出来上がってきましたね. もうお察しかと思われますが, content フォルダ内の.md ファイルが表示されます. このファイルをいじってあげれば自分好みのHome, About 画面を作れますよ. しかしこの状態でBlog をクリックすると404エラーが出てしまいます. だって,　記事何も書いてないんだもの\u0026hellip; ってことで, 記事を作成しましょう!\n$hugo new post/first.md  実行するとcontent/postにfirst.mdというファイルができていると思います. これが記事の正体です. こいつをこんなふうに書いてみましょう.\ncontent/post/first.md\n--- title: \u0026quot;初めての記事\u0026quot; date: 2020-01-09T19:18:36+09:00 draft: false --- こんにちは、ようこそブログへ！  これで, 記事が完成しました. draft は true だと, 「下書き」扱いになって, 普段は表示されません.\n$hugo serverを行ってBlog を開いてみると\u0026hellip; 記事がきちんと投稿されている！\nってことでまとめると, blog の記事を作成するには\nhugo new post/\u0026lt;ファイル名\u0026gt;.md  を行えば良いんです, 簡単でしょ, うん. markdown ファイルの上部は, 記事のメタデータになっていて, タグやカテゴリも追加できます.\n例\n--- title: \u0026quot;初めての記事\u0026quot; date: 2020-01-09T19:18:36+09:00 draft: false tags: ['タグ1', 'タグ2', 'タグ3'] --- こんにちは、ようこそブログへ！  調べたらいろいろ出てきますのでお試しあれ.\n4. deploy.sh の作成\u0026amp;実行 ここからは作ったサイトをネット上に公開していきます. まずは下準備から, blog_src の中で以下を実行します.\n# publicディレクトリを削除。 $ rm -rf public # publicディレクトリを公開先リポジトリとしてサブモジュール化する(最初の設定のときに1回だけ行う) $ git submodule add -b master git@github.com:\u0026lt;ユーザ名\u0026gt;/\u0026lt;ユーザ名\u0026gt;.github.io.git public  次に, blog_srcフォルダ直下にdeploy.shを作ります. 自分がなにかblog_src フォルダ内のファイルをいじってサイトに変更を加えたあとに, このdeploy.shを実行することで, ネット上に公開されているサイトに変更が反映されます.\ndeploy.sh\necho -e \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026quot; # Build the project. hugo -t academic # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026quot;rebuilding site `date`\u0026quot; if [ $# -eq 1 ] then msg=\u0026quot;$1\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; # Push source and build repos. git push origin master # Come Back up to the Project Root cd .. # Commit source repository changes git add . git commit -m \u0026quot;$msg\u0026quot; git push  最後にこのファイルを実行してあげましょう.\n$./ deploy.sh  最後に, ブラウザでhttps://\u0026lt;ユーザ名\u0026gt;.github.io にアクセスしてみてください. できていましたか?\nこれでブログが出来上がったはずです. あとは記事を投稿したりだとか, テーマを変えてみたりだとかいろいろ好きにやっちゃってください. ググればたくさん出てきます.\n 参考 サルでもわかるGit入門\nHUGOでブログ作成 → GitHub Pagesで公開する手順\nHUGOをインストールしてみた\nテーマ Cupper のカスタマイズ\n","date":1578547968,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1578547968,"objectID":"3a4b4550da76f4f33e06b6375ebbe24f","permalink":"https://hiratchi.github.io/post/howtomakeblog/","publishdate":"2020-01-09T14:32:48+09:00","relpermalink":"/post/howtomakeblog/","section":"post","summary":"この記事では, どのようにしてこのサイトを作ったかを解説します. 言わずもかな GitHub と Hugo という静的サイトジェネレータを用いて約20分で出来上がります. 記事はMarkdown で書けるので, 普段 Latex とか使うタイプの人ならば親和性が高いと思います.","tags":["git","hugo","blog"],"title":"Hugo + GitHub でブログを公開するまで","type":"post"}]